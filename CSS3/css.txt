code . ==> to open folder in vscode.
start . ==> to open filder in file explorer
cd .. ==> to go back/ outside current folder.
Right click and inspect.

CSS: Cascading Style Sheets
HTML: Responsible for creating the structure of the page.
CSS : Responsible for the styling and formatting the HTML elements.


CSS Syntax
p{----->Selector
    //Declaration Block
    font-size: 24px;
    color: blue;
}

id value #
class value .

How to add CSS in HTML?
- Inline CSS; adding a style property to the HTML element. using the style property (<p style = " "> </>).
- Internal CSS; adding a style element inside the head of the html page. <head> <style>  </style></head>
- External CSS; creating a new file index.css, need to link it to the html page using the link element
 (<link href= "/index.css" rel = "stylesheet" type = "text/css">) rel = relationship between html doc and 
 the external file.


(Inline is the priority)
Inline override Internal
Internal override External; 20px overides 48px on external CSS page

CSS- Styling Text
Text alignment; align text to either left right or center.(text-align: center/right/left/justify(meaning text is stretched all over available space))
(font-style: )
(font-weight: )
(text-decoration: underline; OR overline; OR line-through; OR none;)
(text-transform: ) UPPERCASE/lowercase/capitalize
(letter-spacing: 2px)decrease or increase the space between alphabets.
(word-spacing: 8px)increases the space between two words.
(line-height: 1.5)increases the space between two lines lines.
(font-family: ) google fonts, add link into head of html element, add css to the font-family.


Adding Border;
to define a border 3 values are needed.
(border-style: dotted or dashed)
(border-width: 6px)
(border-color: red)
(border-top/right/left/bottom-style: )
Or use the shorthand property: (border: 4px solid blue) (border-left/bottom/right/top:  4px solid blue)
(border-radius: 4px) for the corners to be curved/round


Margin and Padding;
Padding: to add space between border and and content. Space inside the element, pushing content inward.
(padding: 16px;)
Padding on different sides: (padding-top/right/bottom/left: 24px)//overides ordinary padding.
Shorthand ==> padding: 16px(top) 20px(right)  28px(bottom) 24px(left); trbl(clockwise)
    two values=> padding: 24px(top and bottom) 48px(left and right); 

Margin: to add space outside the border. Space outside the element, pushing it away from others.
(margin: 34px)
Margin on different sides: (margin-top/right/bottom/left: 24px)
Shorthand ==> margin: 26px(top) 40px(right)  32px(bottom) 24px(left); trbl(clockwise)
    two values=> margin: 24px(top and bottom) 48px(left and right); 

Use margin when you want to space out elements from each other.
Use padding when you want to create space inside an element, around its content.

Styling Lists
CSS allows to change the list types.
ordered lists(list-style-type: upper-alpha;)alphabetical order with uppercase
unordered lists(list-style-type: square;)
(list-style-position: inside)to get rid of indentation with markers(a/i/1) and the line below
(list-style-type: none;)to get rid of markers

Styling Links
Different States
1. Link: the state where link is not visited.
2. Visited: the state when link is visited.
3. Hover: the state when mouse hovered on  the link.
4. Active: This is the state when the link is clicked.

.classname:link{
    color: blue;
}
.classname:visited{
    color: green;
}
.classname:hover{
    color:red;
}
.classname:active{
    color: purple;
}


Styling Buttons
#button-login {
    background-color: lightblue;
    padding: 8px 16px;
    border: none;
    border-radius: 8px;
    outline: none;
    cursor: pointer;//hover 
}
#button-login: hover{
    background-color: blue; //hover color
    color: white;//font color
}


Not clickable button:
#button-disabled{
    background-color: lightblue;
    padding: 8px 16px;
    border: none;
    border-radius: 8px;
    outline: none;
    cursor: pointer;//hover

    cursor: not-allowed;// not allowed to click.
    opacity: 0.6;//accepts a value between 0 and 1, used to look faded.
}


Adding Icons
can use font awesome or google's material items or image tags (<img src = " copy image address"/>, ).
Font awesome: Google font awesome, sign in/up, confirm email, Copy and Paste script code in html head.
Then search for icon you want and copy to html , beside id/class.

Working with Display values
Html; elements have default value block or inline but they can be overide using CSS display values.
<div class = "container"></div>
 display: "block" is the default;
.container{
    display: "block";
    display: "inline";
}

Span has an "inline" default.
display: "inline";
display: "block";
display: "none";  //html elements go away and they do not occupy any space.
visibility: "hidden"; //html elements go away but they still take the space.

Block: An element that takes up the full width available and starts on a new line.

Display Value - inline Block
display value: inline-block; can be given height and width unlike inline(span) element.

Html semantic elements; give structure to the html page.
https://developer.mozilla.org/en-US/docs/Web/HTML/Element#content_sectioning
<body>
    <header></header>
    <main>
        <aside></aside>
        <section>
            <article></article>
        </section>
    </main>
    <footer></footer>
</body>

Tip:
body{
    margin: 0;
}

Tip: width can be 50% while height is 450px.
Tip: for navbar/footer to be stick to the top/bottom and not move

use Position: sticky; and must be paired with a condition top: 0;


Postioning Html Elements
 top: ; right: ; left: ;  bottom: ;
CSS provides:
- static; default position value, position elements in normal order on the webpage.
 position: static;

- relative: position HTML elements relative to their normal position.
 position: relative;
 top: ; right: ; left: ;  bottom: ;
top: moves towards bottom;
right: moves towards left ==> eg right: 10px; moves 10px away from the right. // right: -60px; moves -60px towards the right.
can be used in navbar to move inline elements. position: relative; top: -8px;
- top moves it downward (positive value) or upward (negative value) from that position.

- absolute: relative to the parent element.
The parent element needs to have a position other than static or else the absolute element is positioned
relative to the main Html element.
(in simpler words the navbar then section inside the main then footer, if the parent(main)does not have 
position:relative then the article inside section over laps(stays on top) the navbar)

#wrapper(main){
    position: relative;
}

#article{
    position:absolute;
    top:0;
}


- fixed: self explanatory(stays in the same position even if you scroll the page), not affected by the scroll position of the webpage.

- sticky: combination of position relative and position fixed. It requires a condition ( top: ; right: ; left: ;  bottom: ;)
and based on this condition it toggles between position relative and fixed.
requires:  top: ; right: ; left: ;  bottom: ;

Handling Overflows: occurs when content is too big to fit inside the parent element.
- visible: default value even when the content is bigger than the parent element it is still visible/showing.
    overflow: visible;
- hidden: overflowing content is clipper/not shown
    overflow: hidden;
    #wrapper{
        width: 600px;
        height: 500px;
        overflow: hidden; //only 600 by 500 is shown.
    }
- scroll: when content is overflowing OR when content is NOT overflowing the html element is  STILL made scrollable..
    overflow: scroll; 
- auto: when content is overflowing the html element is made scrollable(only when it is overflowing)

Floating HTML elements
float: ;
- used for positioning elements.
image on the left hand side and text on the right.
float: left;
can add margin-right: 16px as well.

Box Model
--------------------------------------------------------------------
|  margin
|    
|    ----------------------------------------------------------
|    |     border
|    |
|    |      -----------------------------------------------
|    |      |   padding
|    |      |
|    |      |     -----------------------------------
|    |      |     |                                 |
|    |      |     |              CONTENT            |
|    |      |     |                                 |
|    |      |      ----------------------------------
|    |      |-----------------------------------------------
|    |
|    |
|    |---------------------------------------------------------
|
|
|----------------------------------------------------------------------
padding: between border and content

adding padding and border to an elements adss to the widith and height of an element,
so 400px = 446px etc

Box Sizing
so adding padding can increase size of box; thats where this comes in to keep the box the same size 
while adding padding;

box-sizing:border-box; 
==> side-effect: img may become smaller if padding is added and increased.

Adding Shadows
Text Shadow
- text-shadow property; requires two values one for the horizontal shadow and the other for vertical shadow.
third value is for blur(the higher the value the more blurry)
    text-shadow: 4px 4px 10px gray;
- multiple shadows: text-shadow: 2px 2px 2px red, 2px 7px 2px green;
                    text-shadow: horizontal vertical blurry color;

Box Shadow; this property adds a shadow to the html elements box.
color: blue;
width:300px;
height:400px;
border-radius: 4px;
background-color: white;
box-shadow: 0px 4px 4px gray;

CSS Combinators
Single selectors==>
html:
p{

}

id:
#container{

}

class:
.button-login{

}

Combine selectors;
Combinators define relationship between two selectors.
- Descendant Selector: ''
- Child Selector: '>'
- Adjacent Sibling Selector: '+'
- General Sibling Selector: '~'

- Descendant Selector: ''
Syntax: selector_a selector_b;
eg; div p {}; selecting all the paragraphs in the div.
selects all  the elements matching selector_b which are descendants of  the elements matching selector_a.

- Child Selector: '>'
Syntax: selector_a > selector_b;
eg; div > h3 selecting all the paragraphs in the div.
selects all  the elements matching selector_b which are DIRECT descendants of the elements matching selector_a.
Example; article p div(p p p) p p ; only the p directly descendant of article will be affected not the p in the div.

- Adjacent Sibling Selector: '+'
Syntax: selector_a + selector_b;
eg; div + .menu-items;
selects the element matching selector_b which is right next to the elements matching selector_a. In another words the adjacent siblings.
sibling: come after target element.

- General Sibling Selector: '~'
Syntax: selector_a ~ selector_b;
eg; div ~ p
selects all  the elements matching selector_b which are the siblings of the elements matching selector_a.
selects whats after(p) div, as long as its after div and is p and not wrapped  in another div or span, it is getting selected.


Pseudo Classes; used to define a special stage of an element.
menu:link{
    color:black;
}
.classname:focus
.classname:disabled{
    cursor: not-allowed;
}
.classname:focus:required{
    background-color:
}

.classname:hover


general pseudo class
used with Combinators
article > p:first-of-type{//only selecting the first one.
    background-color: pink;
}

article > p:last-of-type{//selecting the last one.
    background-color: pink;
}

article > p:nth-of-type(3){//selecting the third one.
    background-color: pink;
}

Pseudo Elements
- used to style a specific part of an HTML Element.
::after ==>  used to add some content after the content HTML element. 
This content could be text, image or blank.
article > p ::after{
    content: " ' "; //adding a quote before the paragraph.
    content: url ('//http:')
}

::before ==> used to add some content before the content HTML element. 
This content could be text, image or blank.
article > p ::after{
    content: " ' "; //adding a quote after the paragraph.
}

::first-letter ==>only works with block level elements.(paragraph and heading tags)
used to add styles to the first letter of some text.
article > p::first-letter{
    font-size: 24px
}

::first-line ==> only works with block level elements.(paragraph and heading tags)
used to add styles to the first line of some text.
article > p::first-line{
    line-spacing: 1.5px
}

::selection ==> used to add styles to the selected text, it is used to style the text highlight
(when the mouse is used to highlight some words/text.).
article > p ::selection{
    background-color: coral;
}

Adding Backgrounds to HTML elements
background-color: blue;
background-image: url( );
background-repeat: no-repeat;
background-size: widith(500px) height(300px);
background-position: center/top/left/right/bottom/top left/ bottom right;//combination could be used.
Fullscreen background ==> background-size: contain OR cover;
Contain; entire height of specified area
Cover; fills all the space

CSS Gradients
Linear gradient: the color transition is linear, can go either up, down, left, right, diagonal.
background: linear-gradient(direction// starting color or first color//ending color  )three values;
to give it a gradient the use of Backgrounds
#div{
    width: 100%;
    height: 100px;
    background: linear-gradient(to right or 45deg, #f869d5, #56509e)left to right
}
Radial-gradient: the color transition is circular..
background: radial-gradient( #f869d5, #56509e)
background: radial-gradient(circle at top left//closest-side//closest-corner//farthest-side//farthest-corner,  #f869d5, #56509e)

Handling Text Overflow
- Stop text from going to the next line ==> (white-space: nowrap;)
- to handle overflow ==> (overflow: hidden;)

.blog-heading{
    margin 16px 16px 12px;
    font-size: 24px;
    font-family: sans-serif;
    font-weight: 600;
    color: white;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: clip; OR ellipsis;
}
clip;(default) 
ellipsis;(...)the dots


Wrap on the nextline.
word-break: break-all; OR keep-all; //just breaks the word without care

word-wrap: break-word; //breaks in a meaningful manner

TIP: to center or bring section to the middle of the screen use padding-top:12%

Responsive web design;
- website should display equally well for all screen sizes from monitors to phones.

Viewport==> part of the webpage that the user can currently see.
<------------------------------------------------------------------------------------------------------------>
horizontal length ==> viewport width(vw)
Entire viewport width: 
div{
    width: 100vw;
}
40% viewport width:
div{
    width: 40vw;
}

vertical length ==> viewport height(vh)
div{
   height: 100vh;
}

viewport determines how content is scaled and sized when it is rendered on different devices.
viewport meta tag==> to control the width and scailing of the viewport.
without this viewport meta tag, mobile devices render pages at desktop screen width, 
and then scales down the pages to fit the mobil screens.
right click and inspect website and click on the toogle device  toolbar to see how website will 
look on a mobile device.

<meta name="viewport" content="width=device-width, initial-scale=1" >
initial-scale=1(initial zoom level when someone visits the page)

Dynamic width for responsive design
width: 100%;
max-width:800px
min-width:200px//may overflow content is a disadvantage

Media queries==> make it easier to change styles based on the characteristics 
of the device rendering the content.
 characteristics: display type, width, height, orientation, resolution.
 device breakpoints
@media screen and (max-width: 600px){
    //styles for device with max width 600px. eg mobile phones
 }
@media screen and (min-width: 600px){
    //styles for device with min width 600px. eg large screen mobiles, ipad in potrait mode.
 }
@media screen and (min-width: 768px){
    //styles for device with width greater than 768px. eg ipad in lanscape mode.
 }
@media screen and (min-width: 992px){
    //styles for device with width greater than 992px. eg desktop/laptop.
 }
@media screen and (min-width: 1200px){
    //styles for device with width greater than 1200px. eg imac.
 }

TIP: to move something next to eaxh other use display: inline-block;
use display: inline-block;
for both items eg for section and aside
section{
    display: inline-block;
    width:65%;
    margin-right:24px;
}

aside{
    display: inline-block;
    width:25%;
    vertical-align: top;//using  display:inline-block; allows one to use this property. aside will be top side by side with secction.
}

.place-wrapper{
    width: 100%;//100% in 25%
}

.place-wrapper img {
    width: 100%;
}

Flex Layout
- gives container the ability to alter its items width and height to best fill the available space.
- flex container expands items to fill available free space, or shrinks them to prevent overflow. 
This makes it perfect for designing layouts for which the size is unkown or flexible.

Flex container properties
- display-flex; //direction:row
- flex-direction: row;  //direction:row
- flex-direction: row-reverse;  //direction:row aligned on the right, start from the right.
- flex-direction: column;  //direction:column//stacked on top of each other
- flex-direction: column-reverse;  //direction:column
- justify-content: space-between//space-around//flex-start//flex-end//center;
- flex-wrap: wrap;// overflowing content on next line.

Aligning Flex items
Property: align-items; used to align items along the cross-axis.
- display:flex;
- align-items: stretch//flex-start//flex-end//center;//stretch(default value)
- flex-direction: column;
- flex-direction: row;
TIP: this is being done in the container not (items)tag!!main container.

Property: align-content; used to align items along the cross-axis.
It only works when flex is wrapped around multiple lines.//NEEDS TO HAVE MULTIPLE ROWS(flex-wrap)
- display:flex;
- flex-direction: row;
- align-content: center//flex-start//flex-end//space-between//space-around//stretch;


- align-items:center;
- justify-content:center;

Flex Item Properties
Properties used on flex items and not flex containers
.item{
    flex-grow: 1;
}
.item:nth-child(2){
    background-color: pink;
    flex-grow:2;
}

//flex grow and flex shrink do not work together
.item:nth-child(2){
    flex-grow:0;
    Flex-shrink: 2
}

- order: -1// rearranges order of child

.item:nth-child(even){
    background-color: pink;
}

Flex topbar(navbar)
right-nav and left-nav
- on the same line/ next to each other==> display: flex
- align items in the center ==> align-items: center;
- for right menu and left menu to be side to side in the nav add ==> display:flex to navbar tag
nav{
    display: flex;
    justify-content:space-between;
}
left-nav{
    display:flex;
    align-items: center;
}
right-nav{
    display:flex;
    align-items: center;
}

Responsive Grid using Flex(decreasing pge size//spliiting screen)
TIP: wanting 4 cards in a row , chande width of card from width:300px to width:30%
min-width:200px

main{
    max-width: 1200px;
    margin: 0 auto;// to bring to middle/center of screen
}


Transform Properties
- The transform property allows you to visually manipulate an element by translating, rotating, scailing and skewing.
- It is used to translate or move elements across x-axis, y-axis and z-axis.
            transform: translateX(20px)
        1. x-axis - translateX()   left and right
        2. y-axis - translateY()   top and bottom
        3. z-axis - translateZ()
        right hand side ==> give X a positive value;
        move top/up ==> give Y a negative value.

shorthand property:  transform: translate(X,Y)

The Rotate Function
It is used to rotate Html elements along x-axis, y-axis and z-axis.
         1. x-axis - rotateX()   //45deg// rotating along the x axis.
         2. y-axis - rotateY()   //rotating along the vertical axis.
         3. z-axis - rotateZ()   //rotating across the z axis

         transform: scaleX(2)//stretches component horizontally.
         transform: scaleY(2)
shorthand property:  transform: scale(1.5,1.5)

transform: skewX(20deg)//tilt elements left and right

Transition property;
- elements to change values over a specified duration instead of having them occur immediately.
transition-property: background-color;
transition-duration: 100ms;
transition-timing-function: ease-in/ease-out;

Animation property
@keyframes: what happens at a specific moment.
0%(start) 100%(end)

div{
    animation-name:pulse;//keyframe name
    animation-duration:2s;
    animation-iteration-count: infinite;
    animation-direction: alternate;

Shorthand==> animation: pulse 5s;

}
@keyframes pulse{
    0%{
        background-color: pink;
        transform: rotateZ(0deg);
    }
    100%{
         background-color: yellow; 
         transform: rotateZ(180deg); 
    }
}


TIP: to bring something to center use==>
left:50%;
transform: translateX(-50%);

//rocket flying
@keyframes fly{
    0%{
    
        transform: translate(-50%, 0);
    }
    100%{
         transform: translate(-50%, -100vh);
    }
}

Grid layouts
- display: grid;
- grid-template-columns: auto auto auto auto; // 1 row 4 columns
- grid-gap: 16px; //space between
- row-gap: 32px;
- column-gap:16px;


